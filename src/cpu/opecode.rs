#[derive(Debug)]
pub struct Opecode {
    pub name: Instruction,
    pub mode: Addressing,
    pub cycle: u8,
}

#[derive(Debug)]
pub enum Instruction {
    LDA,
    LDX,
    LDY,
    STA,
    STX,
    STY,
    TXA,
    TYA,
    TXS,
    TAY,
    TAX,
    TSX,
    PHP,
    PLP,
    PHA,
    PLA,
    ADC,
    SBC,
    CPX,
    CPY,
    CMP,
    AND,
    EOR,
    ORA,
    BIT,
    ASL,
    LSR,
    ROL,
    ROR,
    INX,
    INY,
    INC,
    DEX,
    DEY,
    DEC,
    CLC,
    CLI,
    CLV,
    SEC,
    SEI,
    NOP,
    BRK,
    JSR,
    JMP,
    RTI,
    RTS,
    BPL,
    BMI,
    BVC,
    BVS,
    BCC,
    BCS,
    BNE,
    BEQ,
    SED,
    CLD,
    LAX,
    SAX,
    DCP,
    ISB,
    SLO,
    RLA,
    SRE,
    RRA,
}

#[derive(Debug, PartialEq)]
pub enum Addressing {
    Immediate,
    ZeroPage,
    Relative,
    Implied,
    Absolute,
    Accumulator,
    ZeroPageX,
    ZeroPageY,
    AbsoluteX,
    AbsoluteY,
    PreIndexedIndirect,
    PostIndexedIndirect,
    IndirectAbsolute,
}

const CYCLES: [u8; 256] = [
    7, 6, 2, 8, 3, 3, 5, 5, 3, 2, 2, 2, 4, 4, 6, 6, 2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 6, 7,
    6, 6, 2, 8, 3, 3, 5, 5, 4, 2, 2, 2, 4, 4, 6, 6, 2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 6, 7,
    6, 6, 2, 8, 3, 3, 5, 5, 3, 2, 2, 2, 3, 4, 6, 6, 2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 6, 7,
    6, 6, 2, 8, 3, 3, 5, 5, 4, 2, 2, 2, 5, 4, 6, 6, 2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 6, 7,
    2, 6, 2, 6, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4, 2, 6, 2, 6, 4, 4, 4, 4, 2, 4, 2, 5, 5, 4, 5, 5,
    2, 6, 2, 6, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4, 2, 5, 2, 5, 4, 4, 4, 4, 2, 4, 2, 4, 4, 4, 4, 4,
    2, 6, 2, 8, 3, 3, 5, 5, 2, 2, 2, 2, 4, 4, 6, 6, 2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,
    2, 6, 3, 8, 3, 3, 5, 5, 2, 2, 2, 2, 4, 4, 6, 6, 2, 5, 2, 8, 4, 4, 6, 6, 2, 4, 2, 7, 4, 4, 7, 7,
];

pub fn get_opecode(x: u8) -> Opecode {
    use self::Addressing::*;
    use self::Instruction::*;
    let cycle = CYCLES[x as usize];
    let (name, mode) = match x {
        0xA9 => (LDA, Immediate),
        0xA5 => (LDA, ZeroPage),
        0xB5 => (LDA, ZeroPageX),
        0xAD => (LDA, Absolute),
        0xBD => (LDA, AbsoluteX),
        0xB9 => (LDA, AbsoluteY),
        0xA1 => (LDA, PreIndexedIndirect),
        0xB1 => (LDA, PostIndexedIndirect),
        0xA2 => (LDX, Immediate),
        0xA6 => (LDX, ZeroPage),
        0xAE => (LDX, Absolute),
        0xB6 => (LDX, ZeroPageY),
        0xBE => (LDX, AbsoluteY),
        0xA0 => (LDY, Immediate),
        0xA4 => (LDY, ZeroPage),
        0xAC => (LDY, Absolute),
        0xB4 => (LDY, ZeroPageX),
        0xBC => (LDY, AbsoluteX),
        0x85 => (STA, ZeroPage),
        0x8D => (STA, Absolute),
        0x95 => (STA, ZeroPageX),
        0x9D => (STA, AbsoluteX),
        0x99 => (STA, AbsoluteY),
        0x81 => (STA, PreIndexedIndirect),
        0x91 => (STA, PostIndexedIndirect),
        0x86 => (STX, ZeroPage),
        0x8E => (STX, Absolute),
        0x96 => (STX, ZeroPageY),
        0x84 => (STY, ZeroPage),
        0x8C => (STY, Absolute),
        0x94 => (STY, ZeroPageX),
        0x8A => (TXA, Implied),
        0x98 => (TYA, Implied),
        0x9A => (TXS, Implied),
        0xA8 => (TAY, Implied),
        0xAA => (TAX, Implied),
        0xBA => (TSX, Implied),
        0x08 => (PHP, Implied),
        0x28 => (PLP, Implied),
        0x48 => (PHA, Implied),
        0x68 => (PLA, Implied),
        0x69 => (ADC, Immediate),
        0x65 => (ADC, ZeroPage),
        0x6D => (ADC, Absolute),
        0x75 => (ADC, ZeroPageX),
        0x7D => (ADC, AbsoluteX),
        0x79 => (ADC, AbsoluteY),
        0x61 => (ADC, PreIndexedIndirect),
        0x71 => (ADC, PostIndexedIndirect),
        0xE9 => (SBC, Immediate),
        0xE5 => (SBC, ZeroPage),
        0xED => (SBC, Absolute),
        0xF5 => (SBC, ZeroPageX),
        0xFD => (SBC, AbsoluteX),
        0xF9 => (SBC, AbsoluteY),
        0xE1 => (SBC, PreIndexedIndirect),
        0xF1 => (SBC, PostIndexedIndirect),
        0xE0 => (CPX, Immediate),
        0xE4 => (CPX, ZeroPage),
        0xEC => (CPX, Absolute),
        0xC0 => (CPY, Immediate),
        0xC4 => (CPY, ZeroPage),
        0xCC => (CPY, Absolute),
        0xC9 => (CMP, Immediate),
        0xC5 => (CMP, ZeroPage),
        0xCD => (CMP, Absolute),
        0xD5 => (CMP, ZeroPageX),
        0xDD => (CMP, AbsoluteX),
        0xD9 => (CMP, AbsoluteY),
        0xC1 => (CMP, PreIndexedIndirect),
        0xD1 => (CMP, PostIndexedIndirect),
        0x29 => (AND, Immediate),
        0x25 => (AND, ZeroPage),
        0x2D => (AND, Absolute),
        0x35 => (AND, ZeroPageX),
        0x3D => (AND, AbsoluteX),
        0x39 => (AND, AbsoluteY),
        0x21 => (AND, PreIndexedIndirect),
        0x31 => (AND, PostIndexedIndirect),
        0x49 => (EOR, Immediate),
        0x45 => (EOR, ZeroPage),
        0x4D => (EOR, Absolute),
        0x55 => (EOR, ZeroPageX),
        0x5D => (EOR, AbsoluteX),
        0x59 => (EOR, AbsoluteY),
        0x41 => (EOR, PreIndexedIndirect),
        0x51 => (EOR, PostIndexedIndirect),
        0x09 => (ORA, Immediate),
        0x05 => (ORA, ZeroPage),
        0x0D => (ORA, Absolute),
        0x15 => (ORA, ZeroPageX),
        0x1D => (ORA, AbsoluteX),
        0x19 => (ORA, AbsoluteY),
        0x01 => (ORA, PreIndexedIndirect),
        0x11 => (ORA, PostIndexedIndirect),
        0x24 => (BIT, ZeroPage),
        0x2C => (BIT, Absolute),
        0x0A => (ASL, Accumulator),
        0x06 => (ASL, ZeroPage),
        0x0E => (ASL, Absolute),
        0x16 => (ASL, ZeroPageX),
        0x1E => (ASL, AbsoluteX),
        0x4A => (LSR, Accumulator),
        0x46 => (LSR, ZeroPage),
        0x4E => (LSR, Absolute),
        0x56 => (LSR, ZeroPageX),
        0x5E => (LSR, AbsoluteX),
        0x2A => (ROL, Accumulator),
        0x26 => (ROL, ZeroPage),
        0x2E => (ROL, Absolute),
        0x36 => (ROL, ZeroPageX),
        0x3E => (ROL, AbsoluteX),
        0x6A => (ROR, Accumulator),
        0x66 => (ROR, ZeroPage),
        0x6E => (ROR, Absolute),
        0x76 => (ROR, ZeroPageX),
        0x7E => (ROR, AbsoluteX),
        0xE8 => (INX, Implied),
        0xC8 => (INY, Implied),
        0xE6 => (INC, ZeroPage),
        0xEE => (INC, Absolute),
        0xF6 => (INC, ZeroPageX),
        0xFE => (INC, AbsoluteX),
        0xCA => (DEX, Implied),
        0x88 => (DEY, Implied),
        0xC6 => (DEC, ZeroPage),
        0xCE => (DEC, Absolute),
        0xD6 => (DEC, ZeroPageX),
        0xDE => (DEC, AbsoluteX),
        0x18 => (CLC, Implied),
        0x58 => (CLI, Implied),
        0xB8 => (CLV, Implied),
        0x38 => (SEC, Implied),
        0x78 => (SEI, Implied),
        0xEA => (NOP, Implied),
        0x00 => (BRK, Implied),
        0x20 => (JSR, Absolute),
        0x4C => (JMP, Absolute),
        0x6C => (JMP, IndirectAbsolute),
        0x40 => (RTI, Implied),
        0x60 => (RTS, Implied),
        0x10 => (BPL, Relative),
        0x30 => (BMI, Relative),
        0x50 => (BVC, Relative),
        0x70 => (BVS, Relative),
        0x90 => (BCC, Relative),
        0xB0 => (BCS, Relative),
        0xD0 => (BNE, Relative),
        0xF0 => (BEQ, Relative),
        0xF8 => (SED, Implied),
        0xD8 => (CLD, Implied),
        0x1A => (NOP, Implied),
        0x3A => (NOP, Implied),
        0x5A => (NOP, Implied),
        0x7A => (NOP, Implied),
        0xDA => (NOP, Implied),
        0xFA => (NOP, Implied),
        0x02 => (NOP, Implied),
        0x12 => (NOP, Implied),
        0x22 => (NOP, Implied),
        0x32 => (NOP, Implied),
        0x42 => (NOP, Implied),
        0x52 => (NOP, Implied),
        0x62 => (NOP, Implied),
        0x72 => (NOP, Implied),
        0x92 => (NOP, Implied),
        0xB2 => (NOP, Implied),
        0xD2 => (NOP, Implied),
        0xF2 => (NOP, Implied),
        0x80 => (NOP, Implied),
        0x82 => (NOP, Implied),
        0x89 => (NOP, Implied),
        0xC2 => (NOP, Implied),
        0xE2 => (NOP, Implied),
        0x04 => (NOP, Implied),
        0x44 => (NOP, Implied),
        0x64 => (NOP, Implied),
        0x14 => (NOP, Implied),
        0x34 => (NOP, Implied),
        0x54 => (NOP, Implied),
        0x74 => (NOP, Implied),
        0xD4 => (NOP, Implied),
        0xF4 => (NOP, Implied),
        0x0C => (NOP, Implied),
        0x1C => (NOP, Implied),
        0x3C => (NOP, Implied),
        0x5C => (NOP, Implied),
        0x7C => (NOP, Implied),
        0xDC => (NOP, Implied),
        0xFC => (NOP, Implied),
        0xA7 => (LAX, ZeroPage),
        0xB7 => (LAX, ZeroPageY),
        0xAF => (LAX, Absolute),
        0xBF => (LAX, AbsoluteY),
        0xA3 => (LAX, PreIndexedIndirect),
        0xB3 => (LAX, PostIndexedIndirect),
        0x87 => (SAX, ZeroPage),
        0x97 => (SAX, ZeroPageY),
        0x8F => (SAX, Absolute),
        0x83 => (SAX, PreIndexedIndirect),
        0xEB => (SBC, Immediate),
        0xC7 => (DCP, ZeroPage),
        0xD7 => (DCP, ZeroPageX),
        0xCF => (DCP, Absolute),
        0xDF => (DCP, AbsoluteX),
        0xDB => (DCP, AbsoluteY),
        0xC3 => (DCP, PreIndexedIndirect),
        0xD3 => (DCP, PostIndexedIndirect),
        0xE7 => (ISB, ZeroPage),
        0xF7 => (ISB, ZeroPageX),
        0xEF => (ISB, Absolute),
        0xFF => (ISB, AbsoluteX),
        0xFB => (ISB, AbsoluteY),
        0xE3 => (ISB, PreIndexedIndirect),
        0xF3 => (ISB, PostIndexedIndirect),
        0x07 => (SLO, ZeroPage),
        0x17 => (SLO, ZeroPageX),
        0x0F => (SLO, Absolute),
        0x1F => (SLO, AbsoluteX),
        0x1B => (SLO, AbsoluteY),
        0x03 => (SLO, PreIndexedIndirect),
        0x13 => (SLO, PostIndexedIndirect),
        0x27 => (RLA, ZeroPage),
        0x37 => (RLA, ZeroPageX),
        0x2F => (RLA, Absolute),
        0x3F => (RLA, AbsoluteX),
        0x3B => (RLA, AbsoluteY),
        0x23 => (RLA, PreIndexedIndirect),
        0x33 => (RLA, PostIndexedIndirect),
        0x47 => (SRE, ZeroPage),
        0x57 => (SRE, ZeroPageX),
        0x4F => (SRE, Absolute),
        0x5F => (SRE, AbsoluteX),
        0x5B => (SRE, AbsoluteY),
        0x43 => (SRE, PreIndexedIndirect),
        0x53 => (SRE, PostIndexedIndirect),
        0x67 => (RRA, ZeroPage),
        0x77 => (RRA, ZeroPageX),
        0x6F => (RRA, Absolute),
        0x7F => (RRA, AbsoluteX),
        0x7B => (RRA, AbsoluteY),
        0x63 => (RRA, PreIndexedIndirect),
        0x73 => (RRA, PostIndexedIndirect),
        _ => unreachable!(),
    };
    Opecode { name, mode, cycle }
}
